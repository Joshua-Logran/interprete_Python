
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSASSIGN COMPLEX DIVIDE ID LPAREN MINUS NUM PLUS PRINT RPAREN SQRT TIMESstatement : ID ASSIGN expresionstatement : PRINT LPAREN expresion RPARENexpresion : expresion PLUS expresion\n                     | expresion MINUS expresion\n                     | expresion TIMES expresion\n                     | expresion DIVIDE expresionexpresion : MINUS expresion %prec UMINUSexpresion : LPAREN expresion RPARENexpresion : NUMexpresion : COMPLEXexpresion : IDexpresion : SQRT LPAREN expresion RPAREN'
    
_lr_action_items = {'ID':([0,4,5,8,9,14,15,16,17,20,],[2,6,6,6,6,6,6,6,6,6,]),'PRINT':([0,],[3,]),'$end':([1,6,7,10,11,18,21,22,23,24,25,26,28,],[0,-11,-1,-9,-10,-7,-2,-3,-4,-5,-6,-8,-12,]),'ASSIGN':([2,],[4,]),'LPAREN':([3,4,5,8,9,12,14,15,16,17,20,],[5,9,9,9,9,20,9,9,9,9,9,]),'MINUS':([4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,],[8,8,-11,15,8,8,-9,-10,15,8,8,8,8,-7,15,8,-3,-4,-5,-6,-8,15,-12,]),'NUM':([4,5,8,9,14,15,16,17,20,],[10,10,10,10,10,10,10,10,10,]),'COMPLEX':([4,5,8,9,14,15,16,17,20,],[11,11,11,11,11,11,11,11,11,]),'SQRT':([4,5,8,9,14,15,16,17,20,],[12,12,12,12,12,12,12,12,12,]),'PLUS':([6,7,10,11,13,18,19,22,23,24,25,26,27,28,],[-11,14,-9,-10,14,-7,14,-3,-4,-5,-6,-8,14,-12,]),'TIMES':([6,7,10,11,13,18,19,22,23,24,25,26,27,28,],[-11,16,-9,-10,16,-7,16,16,16,-5,-6,-8,16,-12,]),'DIVIDE':([6,7,10,11,13,18,19,22,23,24,25,26,27,28,],[-11,17,-9,-10,17,-7,17,17,17,-5,-6,-8,17,-12,]),'RPAREN':([6,10,11,13,18,19,22,23,24,25,26,27,28,],[-11,-9,-10,21,-7,26,-3,-4,-5,-6,-8,28,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expresion':([4,5,8,9,14,15,16,17,20,],[7,13,18,19,22,23,24,25,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID ASSIGN expresion','statement',3,'p_statement_asignacion','interprete.py',68),
  ('statement -> PRINT LPAREN expresion RPAREN','statement',4,'p_statement_impresion','interprete.py',73),
  ('expresion -> expresion PLUS expresion','expresion',3,'p_expresion_binop','interprete.py',77),
  ('expresion -> expresion MINUS expresion','expresion',3,'p_expresion_binop','interprete.py',78),
  ('expresion -> expresion TIMES expresion','expresion',3,'p_expresion_binop','interprete.py',79),
  ('expresion -> expresion DIVIDE expresion','expresion',3,'p_expresion_binop','interprete.py',80),
  ('expresion -> MINUS expresion','expresion',2,'p_expresion_unario','interprete.py',85),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion_grupo','interprete.py',90),
  ('expresion -> NUM','expresion',1,'p_expresion_numero','interprete.py',95),
  ('expresion -> COMPLEX','expresion',1,'p_expresion_complejo','interprete.py',100),
  ('expresion -> ID','expresion',1,'p_expresion_id','interprete.py',105),
  ('expresion -> SQRT LPAREN expresion RPAREN','expresion',4,'p_expresion_sqrt','interprete.py',114),
]
